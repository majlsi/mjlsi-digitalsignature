// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DBEntities))]
    [Migration("20230607131435_iniial-mig")]
    partial class iniialmig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.ActionType", b =>
                {
                    b.Property<int>("ActionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ActionTypeID");

                    b.ToTable("action_types", (string)null);

                    b.HasData(
                        new
                        {
                            ActionTypeID = 1,
                            ActionTypeName = "Viewed",
                            CreatedBy = 0,
                            ModifiedBy = 0
                        },
                        new
                        {
                            ActionTypeID = 2,
                            ActionTypeName = "Signed",
                            CreatedBy = 0,
                            ModifiedBy = 0
                        });
                });

            modelBuilder.Entity("Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ApplicationPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CallbackURL")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ReturnURL")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TimeZoneDifference")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("UserID");

                    b.ToTable("applications", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationID = 1,
                            ApplicationEmail = "test@etikal.sa",
                            ApplicationName = "Etikal Signature",
                            ApplicationPassword = "ꉟ뺾",
                            CallbackURL = "https://socpa-backend.thiqah.sa/Backend/api/jobs/contract-signature",
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            ReturnURL = "https://socpapp.thiqah.sa/app/requests/list",
                            TimeZoneDifference = 0
                        });
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<int>("ApplicationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("UserID");

                    b.ToTable("application_users", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationUserID = 1,
                            ApplicationID = 1,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Models.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("OriginalDocumentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ReturnURL")
                        .HasColumnType("longtext");

                    b.HasKey("DocumentID");

                    b.HasIndex("ApplicationID");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Models.DocumentField", b =>
                {
                    b.Property<int>("DocumentFieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentFieldComment")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("DocumentFieldValue")
                        .HasColumnType("text");

                    b.Property<int>("DocumentPageID")
                        .HasColumnType("int");

                    b.Property<int>("FieldTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SignatureTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("XPosition")
                        .HasColumnType("int");

                    b.Property<int>("YPosition")
                        .HasColumnType("int");

                    b.HasKey("DocumentFieldID");

                    b.HasIndex("DocumentPageID");

                    b.HasIndex("FieldTypeID");

                    b.HasIndex("SignatureTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("document_fields", (string)null);
                });

            modelBuilder.Entity("Models.DocumentPage", b =>
                {
                    b.Property<int>("DocumentPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("DocumentPageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.HasKey("DocumentPageID");

                    b.HasIndex("DocumentID");

                    b.ToTable("document_pages", (string)null);
                });

            modelBuilder.Entity("Models.DocumentSignatureCode", b =>
                {
                    b.Property<int>("DocumentSignatureCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("VerificationCodeExpiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DocumentSignatureCodeID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("UserID");

                    b.ToTable("document_signature_codes", (string)null);
                });

            modelBuilder.Entity("Models.DocumentUser", b =>
                {
                    b.Property<int>("DocumentUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DocumentUserID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("UserID");

                    b.ToTable("document_users", (string)null);
                });

            modelBuilder.Entity("Models.DocumentUserAction", b =>
                {
                    b.Property<int>("DocumentUserActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActionTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SignatureTypeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DocumentUserActionID");

                    b.HasIndex("ActionTypeID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("SignatureTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("document_user_actions", (string)null);
                });

            modelBuilder.Entity("Models.FieldType", b =>
                {
                    b.Property<int>("FieldTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FieldTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("FieldTypeID");

                    b.ToTable("field_types", (string)null);

                    b.HasData(
                        new
                        {
                            FieldTypeID = 1,
                            CreatedBy = 0,
                            FieldTypeName = "Signature",
                            ModifiedBy = 0
                        },
                        new
                        {
                            FieldTypeID = 2,
                            CreatedBy = 0,
                            FieldTypeName = "SignatureButton",
                            ModifiedBy = 0
                        },
                        new
                        {
                            FieldTypeID = 3,
                            CreatedBy = 0,
                            FieldTypeName = "Button",
                            ModifiedBy = 0
                        });
                });

            modelBuilder.Entity("Models.NotificationAction", b =>
                {
                    b.Property<int>("NotificationActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icon")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("NotificationActionID");

                    b.ToTable("NotificationActions");

                    b.HasData(
                        new
                        {
                            NotificationActionID = 1,
                            ActionName = "SendVerificationCodeEmail",
                            CreatedBy = 0,
                            IsVisible = false,
                            ModifiedBy = 0,
                            TitleAr = "كود تاكيد التوقيع",
                            TitleEn = "Verify signature code"
                        },
                        new
                        {
                            NotificationActionID = 2,
                            ActionName = "SendVerificationCodeSMS",
                            CreatedBy = 0,
                            IsVisible = false,
                            ModifiedBy = 0,
                            TitleAr = "كود تاكيد التوقيع",
                            TitleEn = "Verify signature code"
                        },
                        new
                        {
                            NotificationActionID = 3,
                            ActionName = "SendVerificationCodeAll",
                            CreatedBy = 0,
                            IsVisible = false,
                            ModifiedBy = 0,
                            TitleAr = "كود تاكيد التوقيع",
                            TitleEn = "Verify signature code"
                        },
                        new
                        {
                            NotificationActionID = 4,
                            ActionName = "UserRegistration",
                            CreatedBy = 0,
                            IsVisible = false,
                            ModifiedBy = 0,
                            TitleAr = "User Registration ar",
                            TitleEn = "User Registration"
                        });
                });

            modelBuilder.Entity("Models.NotificationSetting", b =>
                {
                    b.Property<int>("NotificationSettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("NotificationActionID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SubjectAr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("NotificationSettingID");

                    b.HasIndex("NotificationActionID");

                    b.HasIndex("NotificationTypeID");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new
                        {
                            NotificationSettingID = 1,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            NotificationActionID = 1,
                            NotificationTypeID = 1,
                            Subject = "Verify signature code",
                            SubjectAr = "كود تاكيد التوقيع",
                            TemplateName = "SendVerificationCodeEmail"
                        },
                        new
                        {
                            NotificationSettingID = 2,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            NotificationActionID = 2,
                            NotificationTypeID = 2,
                            Subject = "Verify signature code",
                            SubjectAr = "كود تاكيد التوقيع",
                            TemplateName = "SendVerificationCodeSMS"
                        },
                        new
                        {
                            NotificationSettingID = 3,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            NotificationActionID = 3,
                            NotificationTypeID = 1,
                            Subject = "Verify signature code",
                            SubjectAr = "كود تاكيد التوقيع",
                            TemplateName = "SendVerificationCodeEmail"
                        },
                        new
                        {
                            NotificationSettingID = 4,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            NotificationActionID = 3,
                            NotificationTypeID = 2,
                            Subject = "Verify signature code",
                            SubjectAr = "كود تاكيد التوقيع",
                            TemplateName = "SendVerificationCodeSMS"
                        },
                        new
                        {
                            NotificationSettingID = 5,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            NotificationActionID = 4,
                            NotificationTypeID = 1,
                            Subject = "User Registration",
                            SubjectAr = "User Registration ar",
                            TemplateName = "UserRegistration"
                        });
                });

            modelBuilder.Entity("Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("NotificationTypeID");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            NotificationTypeID = 1,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            TypeName = "Email"
                        },
                        new
                        {
                            NotificationTypeID = 2,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            TypeName = "SMS"
                        },
                        new
                        {
                            NotificationTypeID = 3,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            TypeName = "InAppNotification"
                        });
                });

            modelBuilder.Entity("Models.SignatureType", b =>
                {
                    b.Property<int>("SignatureTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("SignatureTypeName")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.HasKey("SignatureTypeID");

                    b.ToTable("signature_types", (string)null);

                    b.HasData(
                        new
                        {
                            SignatureTypeID = 1,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            SignatureTypeName = "Draw"
                        },
                        new
                        {
                            SignatureTypeID = 2,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            SignatureTypeName = "Upload"
                        },
                        new
                        {
                            SignatureTypeID = 3,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            SignatureTypeName = "Type"
                        },
                        new
                        {
                            SignatureTypeID = 4,
                            CreatedBy = 0,
                            ModifiedBy = 0,
                            SignatureTypeName = "Saved Signature"
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserPhoneNumber")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedBy = 0,
                            FullName = " Admin",
                            IsActive = true,
                            ModifiedBy = 0,
                            UserEmail = "admin@admin.com",
                            UserName = "admin",
                            UserPassword = "ꉟ뺾"
                        });
                });

            modelBuilder.Entity("Models.UserSignature", b =>
                {
                    b.Property<int>("UserSignatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("SignatureValue")
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserSignatureID");

                    b.HasIndex("UserID");

                    b.ToTable("user_signatures", (string)null);
                });

            modelBuilder.Entity("Models.Application", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.HasOne("Models.Application", "Application")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Document", b =>
                {
                    b.HasOne("Models.Application", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Models.DocumentField", b =>
                {
                    b.HasOne("Models.DocumentPage", "DocumentPage")
                        .WithMany("DocumentFields")
                        .HasForeignKey("DocumentPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.SignatureType", "SignatureType")
                        .WithMany()
                        .HasForeignKey("SignatureTypeID");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("DocumentPage");

                    b.Navigation("FieldType");

                    b.Navigation("SignatureType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DocumentPage", b =>
                {
                    b.HasOne("Models.Document", "Document")
                        .WithMany("DocumentPages")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Models.DocumentSignatureCode", b =>
                {
                    b.HasOne("Models.Document", "Document")
                        .WithMany("DocumentSignatureCodes")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("DocumentSignatureCodes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DocumentUser", b =>
                {
                    b.HasOne("Models.Document", "Document")
                        .WithMany("DocumentUsers")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("DocumentUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DocumentUserAction", b =>
                {
                    b.HasOne("Models.ActionType", "ActionType")
                        .WithMany("DocumentUserActions")
                        .HasForeignKey("ActionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Document", "Document")
                        .WithMany("DocumentUserActions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.SignatureType", "SignatureType")
                        .WithMany()
                        .HasForeignKey("SignatureTypeID");

                    b.HasOne("Models.User", "User")
                        .WithMany("DocumentUserActions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("Document");

                    b.Navigation("SignatureType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.NotificationSetting", b =>
                {
                    b.HasOne("Models.NotificationAction", "NotificationAction")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("NotificationActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationAction");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Models.UserSignature", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("UserSignatures")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ActionType", b =>
                {
                    b.Navigation("DocumentUserActions");
                });

            modelBuilder.Entity("Models.Application", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Models.Document", b =>
                {
                    b.Navigation("DocumentPages");

                    b.Navigation("DocumentSignatureCodes");

                    b.Navigation("DocumentUserActions");

                    b.Navigation("DocumentUsers");
                });

            modelBuilder.Entity("Models.DocumentPage", b =>
                {
                    b.Navigation("DocumentFields");
                });

            modelBuilder.Entity("Models.NotificationAction", b =>
                {
                    b.Navigation("NotificationSettings");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("DocumentSignatureCodes");

                    b.Navigation("DocumentUserActions");

                    b.Navigation("DocumentUsers");

                    b.Navigation("UserSignatures");
                });
#pragma warning restore 612, 618
        }
    }
}
